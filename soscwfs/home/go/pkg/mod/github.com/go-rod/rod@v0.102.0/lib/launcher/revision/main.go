package main

import (
	"encoding/json"
	"fmt"
	"net/http"
	"path/filepath"
	"regexp"
	"strings"

	"github.com/go-rod/rod/lib/utils"
)

const mirror = "https://registry.npmmirror.com/-/binary/chromium-browser-snapshots/Mac_Arm/"

var slash = filepath.FromSlash

func main() {
	res, err := http.Get(mirror)
	utils.E(err)
	defer func() { _ = res.Body.Close() }()

	var data interface{}
	err = json.NewDecoder(res.Body).Decode(&data)
	utils.E(err)

	list := data.([]interface{})
	latest := list[len(list)-1].(map[string]interface{})["name"].(string)
	revision := strings.TrimRight(latest, "/")

	if !regexp.MustCompile(`^\d+$`).MatchString(revision) {
		utils.E(fmt.Errorf("cannot match version of the latest chromium from %s", mirror))
	}

	build := utils.S(`// generated by "lib/launcher/revision"

package launcher

// DefaultRevision for chrome
const DefaultRevision = {{.revision}}
`,
		"revision", revision,
	)

	utils.E(utils.OutputFile(slash("lib/launcher/revision.go"), build))

}
