#!/usr/bin/env node

const fs = require("fs");
const child_process  = require("child_process");

const getPrefixPath = async () => {
  return new Promise( (resolve, reject) => {
    child_process.exec(`echo "$PREFIX"`, (err, res) => {
      if (err) {
	reject(err);
      } else {
	resolve(res.substr(0, res.length-1));
      }
    });
  });
}

const readdir = async path => {
  return new Promise( (resolve, reject) => {
    fs.readdir(path, (err, files) => {
      if (err) {
        reject(err);
      } else {
        resolve(files);
      }
    });
  });
}

const open = (filename, mode) => {
  const fd = {};
  fd.internalFd = fs.openSync(filename, mode);
  fd.read = (buffer, position, len) => fs.readSync(fd.internalFd, buffer, position, len);
  fd.puts = (str) => fs.writeSync(fd.internalFd, str);
  fd.close = () => fs.closeSync(fd.internalFd);
  return fd;
}

const dumpOnFile = (filename, text) => {
  const fd = open(filename, "a+");
  fd.puts(text);
  fd.close();
}

const output = text => {
  const fd = open("/dev/stdout", "w");
  fd.puts(text);
  fd.close();
}

const input = () => {
  let rtnval = "";
  let buffer = Buffer.alloc ? Buffer.alloc(1) : new Buffer(1);
  for(;;) {
    fs.readSync(0, buffer, 0, 1);
    if(buffer[0] === 10) {
      break;
    } else if(buffer[0] !== 13) {
      rtnval += new String(buffer);
    }
  }
  return rtnval;
}

const ask = question => {
  output(question);
  return input();
}


const get7zFiles = files => files.filter(file => file.substr(file.length-3, file.length-1) === ".7z");

const loadFile = async filename => {
  return new Promise( (resolve, reject) => {
    filename = fs.readFile(filename, "utf-8", (err, file) => {
      if (err) {
        resolve(false);
      } else {
        resolve(file);
      }
    });
  });
};


const getDescription = async path => {
  return new Promise( async (resolve, reject) => {
    let file = await loadFile(path);
    if (file === false) {
      const addDescription = ask(`No description avaialble for ${path} template, do you want to add a description? y/n: `);
      if (/y/gi.test(addDescription)) {
        const newDescription = ask(`\nAdd your new description: `);
        console.log(`Adding ${newDescription} to template ${path}`);
	dumpOnFile(path, newDescription);
	file = newDescription;
      }
      file = "No description";
    }


    resolve(file);
  });
}

const extractFiles = async filename => {
  const prefix = await getPrefixPath();
  return new Promise( (resolve, reject) => {
    child_process.exec(`echo "u" | 7z x "${prefix}/include/create-project-templates/${filename}.7z" -o"./"`, (err, res) => {
      if (err) {
        reject(err);
      } else {
        resolve(res);
      }
    });
  });
}

const createTemplate = async filename => {
  const prefix = await getPrefixPath();
  return new Promise( (resolve, reject) => {
    child_process.exec(`7z a "${prefix}/include/create-project-templates/${filename}.7z" "./${filename}"`, (err, res) => {
      if (err) {
        reject(err);
      } else {
        resolve(res);
      }
    });
  });
}

const getSelectedOptions = () => {
  const selected = {};
  const args = process.argv;
  if (args.length == 2) {
    return selected;
  }
  for (let i in args) {
    const actual = args[i];
    const next = args[+i + 1];
    switch(actual) {
      case "l":
      case "-l":
      case "list":
      case "--list":
	selected.list = true;
      break;

      case "c":
      case "-c":
      case "create":
      case "--create":
	selected.create = next;
	return selected;
      break;

      case "h":
      case "-h":
      case "help":
      case "--help":
	return {};
      break;

      case "r":
      case "-r":
      case "remove":
      case "--remove":
	selected.remove = next;
	return selected;
      break;

      default:
        selected.templates = args;
    }
  }
  return selected;
}



(async () => {
  console.log(); // line break before any output
  const prefix = await getPrefixPath();
  const options = getSelectedOptions();
  if (options.list) {
    const path = `${prefix}/include/create-project-templates`;
    const files = get7zFiles(await readdir(path));
    console.log("Available Templates:");
    for (let i in files) {
      const filename = files[i].substr(0, files[i].length - 3);
      let description = await getDescription(`${path}/${filename}.description`);
      if (description[description.length-1] === "\n") {
        description = description.substr(0, description.length - 1);
      }
      console.log(`  ${filename} - ${description}`);
    }
  } else if (options.create) {
    // remove "/" at the end
    if (options.create[options.create.length-1] === "/") {
      options.create = options.create.substr(0, options.create.length - 1);
    }

    // get filename from paths 
    if (/\//g.test(options.create)) {
      options.create = options.create.split("/");
      options.create = options.create[options.create.length - 1];
    }

    const res = await createTemplate(options.create);
    //console.log(res);
    console.log("Template Created");

  } else if (options.remove) {
    const path = `${prefix}/include/create-project-templates`;
    try {
      fs.unlinkSync(`${path}/${options.remove}`);
    } catch(err) {}

    try {
      fs.unlinkSync(`${path}/${options.remove}.7z`);
    } catch(err) {
      console.log(`Template not found`);
      return;
    }

    try {
      fs.unlinkSync(`${path}/${options.remove}.description`);
    } catch(err) {}

    console.log(`Template Removed`);

  } else if (options.templates) {
    options.templates.shift();
    options.templates.shift();
    const path = `${prefix}/include/create-project-templates`;
    const files = get7zFiles(await readdir(path));
    for (let i in options.templates) {
      for (let j in files) {
        const filename = files[j].substr(0, files[j].length - 3);
	if (options.templates[i] === filename) {
          const res = await extractFiles(filename);
	  //console.log(res);
          console.log(`${filename} generated.`);
	}
      }
    }
  } else {
    console.log(`
List available templates:
  create-project list

Generate template:
  create-project basic-web

Create your custom template:
  create-project create ./myFolder

Remove a template:
  create-project remove myFolder
`);


  }

})();

